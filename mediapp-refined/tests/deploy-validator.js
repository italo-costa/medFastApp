#!/usr/bin/env node

/**
 * üöÄ VALIDA√á√ÉO DE DEPLOY MEDIAPP
 * 
 * Testes espec√≠ficos para valida√ß√£o de deploy em diferentes ambientes:
 * - ‚úÖ Development (Local)
 * - ‚úÖ Staging (Ubuntu Server)
 * - ‚úÖ Production (Deploy completo)
 * - ‚úÖ Mobile Build (Android/iOS)
 * - ‚úÖ Database Migration
 * - ‚úÖ Environment Configuration
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class DeployValidator {
    constructor() {
        this.results = {
            environment: null,
            tests: [],
            errors: [],
            warnings: [],
            deployChecks: {
                backend: false,
                frontend: false,
                mobile: false,
                database: false,
                security: false
            }
        };
        
        this.environments = {
            development: {
                url: 'http://localhost:3002',
                database: 'postgresql://localhost:5432/mediapp_dev',
                secure: false
            },
            staging: {
                url: 'https://staging-mediapp.com',
                database: 'postgresql://staging:5432/mediapp',
                secure: true
            },
            production: {
                url: 'https://mediapp.com',
                database: 'postgresql://prod:5432/mediapp',
                secure: true
            }
        };
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const colors = {
            info: '\x1b[36m',
            success: '\x1b[32m',
            warning: '\x1b[33m',
            error: '\x1b[31m',
            reset: '\x1b[0m'
        };
        
        console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);
        
        this.results.tests.push({
            timestamp,
            message,
            type
        });
    }

    async detectEnvironment() {
        this.log('üîç Detectando ambiente de deploy...', 'info');
        
        try {
            // Verificar vari√°veis de ambiente
            const nodeEnv = process.env.NODE_ENV || 'development';
            const port = process.env.PORT || 3002;
            const dbUrl = process.env.DATABASE_URL;
            
            this.results.environment = {
                NODE_ENV: nodeEnv,
                PORT: port,
                DATABASE_URL: dbUrl ? '[CONFIGURED]' : '[NOT SET]',
                platform: process.platform,
                nodeVersion: process.version
            };
            
            this.log(`üìä Ambiente detectado: ${nodeEnv}`, 'success');
            this.log(`üåê Porta: ${port}`, 'info');
            this.log(`üíæ Database: ${dbUrl ? 'Configurado' : 'N√£o configurado'}`, dbUrl ? 'success' : 'warning');
            
            return nodeEnv;
            
        } catch (error) {
            this.log(`‚ùå Erro ao detectar ambiente: ${error.message}`, 'error');
            this.results.errors.push(error.message);
            return 'unknown';
        }
    }

    async validateBackendDeploy(baseUrl) {
        this.log('üîß Validando deploy do backend...', 'info');
        
        try {
            // 1. Health Check
            const healthResponse = await axios.get(`${baseUrl}/health`, { timeout: 10000 });
            if (healthResponse.status !== 200) {
                throw new Error('Health check falhou');
            }
            this.log('‚úÖ Health check passou', 'success');
            
            // 2. Verificar estrutura da resposta
            const health = healthResponse.data;
            const requiredFields = ['status', 'message', 'database', 'server'];
            for (const field of requiredFields) {
                if (!(field in health)) {
                    this.log(`‚ö†Ô∏è  Campo ${field} ausente no health check`, 'warning');
                }
            }
            
            // 3. Testar APIs cr√≠ticas
            const criticalApis = [
                '/api/medicos',
                '/api/patients',
                '/api/statistics/dashboard'
            ];
            
            for (const endpoint of criticalApis) {
                try {
                    const response = await axios.get(`${baseUrl}${endpoint}`, { timeout: 5000 });
                    if (response.status === 200 && response.data.success) {
                        this.log(`‚úÖ API ${endpoint} funcionando`, 'success');
                    } else {
                        this.log(`‚ö†Ô∏è  API ${endpoint} com problemas`, 'warning');
                    }
                } catch (error) {
                    this.log(`‚ùå API ${endpoint} falhou: ${error.message}`, 'error');
                    this.results.errors.push(`API ${endpoint}: ${error.message}`);
                }
            }
            
            // 4. Verificar performance
            const start = Date.now();
            await axios.get(`${baseUrl}/health`);
            const responseTime = Date.now() - start;
            
            if (responseTime > 2000) {
                this.log(`‚ö†Ô∏è  Tempo de resposta alto: ${responseTime}ms`, 'warning');
            } else {
                this.log(`‚úÖ Tempo de resposta OK: ${responseTime}ms`, 'success');
            }
            
            this.results.deployChecks.backend = true;
            
        } catch (error) {
            this.log(`‚ùå Falha na valida√ß√£o do backend: ${error.message}`, 'error');
            this.results.errors.push(`Backend: ${error.message}`);
            this.results.deployChecks.backend = false;
        }
    }

    async validateFrontendDeploy(baseUrl) {
        this.log('üåê Validando deploy do frontend...', 'info');
        
        try {
            // 1. P√°ginas principais
            const pages = [
                '/gestao-medicos.html',
                '/gestao-pacientes.html',
                '/app.html'
            ];
            
            for (const page of pages) {
                try {
                    const response = await axios.get(`${baseUrl}${page}`, { timeout: 10000 });
                    
                    if (response.status !== 200) {
                        throw new Error(`Status ${response.status}`);
                    }
                    
                    // Verificar se √© um HTML v√°lido
                    if (!response.data.includes('<html') || !response.data.includes('</html>')) {
                        throw new Error('HTML inv√°lido');
                    }
                    
                    // Verificar tamanho m√≠nimo
                    if (response.data.length < 1000) {
                        throw new Error('Conte√∫do muito pequeno');
                    }
                    
                    this.log(`‚úÖ P√°gina ${page} OK`, 'success');
                    
                } catch (error) {
                    this.log(`‚ùå P√°gina ${page} falhou: ${error.message}`, 'error');
                    this.results.errors.push(`Frontend ${page}: ${error.message}`);
                }
            }
            
            // 2. Verificar assets CSS/JS
            const assetsCheck = await axios.get(`${baseUrl}/app.html`);
            const content = assetsCheck.data;
            
            if (content.includes('api/medicos') && content.includes('editarMedico')) {
                this.log('‚úÖ JavaScript integrado corretamente', 'success');
            } else {
                this.log('‚ö†Ô∏è  JavaScript pode estar mal integrado', 'warning');
            }
            
            // 3. Verificar responsividade (simular diferentes viewports)
            this.log('üì± Verificando responsividade...', 'info');
            if (content.includes('viewport') && content.includes('responsive')) {
                this.log('‚úÖ Meta tags de responsividade encontradas', 'success');
            }
            
            this.results.deployChecks.frontend = true;
            
        } catch (error) {
            this.log(`‚ùå Falha na valida√ß√£o do frontend: ${error.message}`, 'error');
            this.results.errors.push(`Frontend: ${error.message}`);
            this.results.deployChecks.frontend = false;
        }
    }

    async validateDatabaseDeploy() {
        this.log('üíæ Validando deploy do banco de dados...', 'info');
        
        try {
            // Verificar atrav√©s da API health
            const healthResponse = await axios.get(`http://localhost:3002/health`);
            const health = healthResponse.data;
            
            if (health.database !== 'Connected') {
                throw new Error('Banco de dados n√£o conectado');
            }
            
            // Verificar se h√° dados b√°sicos
            if (typeof health.medicos === 'number' && health.medicos >= 0) {
                this.log(`‚úÖ Dados de m√©dicos: ${health.medicos} registros`, 'success');
            } else {
                this.log('‚ö†Ô∏è  Dados de m√©dicos inconsistentes', 'warning');
            }
            
            if (typeof health.pacientes === 'number' && health.pacientes >= 0) {
                this.log(`‚úÖ Dados de pacientes: ${health.pacientes} registros`, 'success');
            } else {
                this.log('‚ö†Ô∏è  Dados de pacientes inconsistentes', 'warning');
            }
            
            // Testar opera√ß√µes CRUD b√°sicas
            try {
                const medicosResponse = await axios.get('http://localhost:3002/api/medicos');
                if (medicosResponse.data.success) {
                    this.log('‚úÖ Opera√ß√µes de leitura funcionando', 'success');
                } else {
                    this.log('‚ö†Ô∏è  Problemas nas opera√ß√µes de leitura', 'warning');
                }
            } catch (error) {
                this.log(`‚ùå Erro nas opera√ß√µes de banco: ${error.message}`, 'error');
            }
            
            this.results.deployChecks.database = true;
            
        } catch (error) {
            this.log(`‚ùå Falha na valida√ß√£o do banco: ${error.message}`, 'error');
            this.results.errors.push(`Database: ${error.message}`);
            this.results.deployChecks.database = false;
        }
    }

    async validateMobileBuild() {
        this.log('üì± Validando build mobile...', 'info');
        
        try {
            const mobileDir = path.join(process.cwd(), '..', 'mobile');
            
            // 1. Verificar estrutura do projeto
            const requiredFiles = [
                'package.json',
                'App.tsx',
                'android/build.gradle',
                'ios/MediApp.xcodeproj/project.pbxproj'
            ];
            
            for (const file of requiredFiles) {
                const filePath = path.join(mobileDir, file);
                if (fs.existsSync(filePath)) {
                    this.log(`‚úÖ ${file} encontrado`, 'success');
                } else {
                    this.log(`‚ö†Ô∏è  ${file} n√£o encontrado`, 'warning');
                }
            }
            
            // 2. Verificar package.json
            const packageJsonPath = path.join(mobileDir, 'package.json');
            if (fs.existsSync(packageJsonPath)) {
                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                
                // Verificar scripts de build
                const requiredScripts = ['android', 'ios', 'build:android', 'build:ios'];
                const availableScripts = Object.keys(packageJson.scripts || {});
                
                for (const script of requiredScripts) {
                    if (availableScripts.includes(script)) {
                        this.log(`‚úÖ Script ${script} configurado`, 'success');
                    } else {
                        this.log(`‚ö†Ô∏è  Script ${script} n√£o encontrado`, 'warning');
                    }
                }
                
                // Verificar depend√™ncias cr√≠ticas
                const criticalDeps = [
                    'react-native',
                    '@reduxjs/toolkit',
                    'react-navigation'
                ];
                
                for (const dep of criticalDeps) {
                    const hasMainDep = packageJson.dependencies && packageJson.dependencies[dep];
                    const hasNavDep = packageJson.dependencies && Object.keys(packageJson.dependencies).some(d => d.includes(dep));
                    
                    if (hasMainDep || hasNavDep) {
                        this.log(`‚úÖ Depend√™ncia ${dep} OK`, 'success');
                    } else {
                        this.log(`‚ö†Ô∏è  Depend√™ncia ${dep} pode estar ausente`, 'warning');
                    }
                }
            }
            
            // 3. Simular processo de build (verifica√ß√£o est√°tica)
            this.log('üîß Verificando configura√ß√£o de build...', 'info');
            
            // Android
            const androidBuildPath = path.join(mobileDir, 'android', 'build.gradle');
            if (fs.existsSync(androidBuildPath)) {
                this.log('‚úÖ Configura√ß√£o Android encontrada', 'success');
            }
            
            // iOS
            const iosBuildPath = path.join(mobileDir, 'ios');
            if (fs.existsSync(iosBuildPath)) {
                this.log('‚úÖ Configura√ß√£o iOS encontrada', 'success');
            }
            
            this.results.deployChecks.mobile = true;
            
        } catch (error) {
            this.log(`‚ùå Falha na valida√ß√£o mobile: ${error.message}`, 'error');
            this.results.errors.push(`Mobile: ${error.message}`);
            this.results.deployChecks.mobile = false;
        }
    }

    async validateSecurity(baseUrl, isProduction = false) {
        this.log('üîí Validando configura√ß√µes de seguran√ßa...', 'info');
        
        try {
            const response = await axios.get(`${baseUrl}/health`);
            const headers = response.headers;
            
            // Headers de seguran√ßa obrigat√≥rios
            const securityHeaders = {
                'x-content-type-options': 'nosniff',
                'x-frame-options': 'DENY',
                'x-xss-protection': '1; mode=block'
            };
            
            for (const [header, expectedValue] of Object.entries(securityHeaders)) {
                if (headers[header]) {
                    this.log(`‚úÖ Header ${header}: ${headers[header]}`, 'success');
                } else {
                    const severity = isProduction ? 'error' : 'warning';
                    this.log(`${isProduction ? '‚ùå' : '‚ö†Ô∏è'} Header ${header} ausente`, severity);
                    if (isProduction) {
                        this.results.errors.push(`Security header ${header} missing`);
                    }
                }
            }
            
            // Verificar HTTPS em produ√ß√£o
            if (isProduction && !baseUrl.startsWith('https://')) {
                this.log('‚ùå HTTPS obrigat√≥rio em produ√ß√£o', 'error');
                this.results.errors.push('HTTPS required in production');
            } else if (isProduction) {
                this.log('‚úÖ HTTPS configurado', 'success');
            }
            
            // Verificar CORS
            const corsHeader = headers['access-control-allow-origin'];
            if (corsHeader === '*' && isProduction) {
                this.log('‚ùå CORS muito permissivo para produ√ß√£o', 'error');
                this.results.errors.push('CORS too permissive for production');
            } else {
                this.log(`‚úÖ CORS: ${corsHeader || 'n√£o configurado'}`, 'success');
            }
            
            this.results.deployChecks.security = true;
            
        } catch (error) {
            this.log(`‚ùå Falha na valida√ß√£o de seguran√ßa: ${error.message}`, 'error');
            this.results.errors.push(`Security: ${error.message}`);
            this.results.deployChecks.security = false;
        }
    }

    async validateEnvironmentConfig() {
        this.log('‚öôÔ∏è Validando configura√ß√£o do ambiente...', 'info');
        
        // Vari√°veis obrigat√≥rias
        const requiredEnvVars = [
            'NODE_ENV',
            'DATABASE_URL'
        ];
        
        const optionalEnvVars = [
            'PORT',
            'JWT_SECRET',
            'CORS_ORIGIN'
        ];
        
        for (const envVar of requiredEnvVars) {
            if (process.env[envVar]) {
                this.log(`‚úÖ ${envVar}: configurado`, 'success');
            } else {
                this.log(`‚ùå ${envVar}: N√ÉO CONFIGURADO`, 'error');
                this.results.errors.push(`Required environment variable ${envVar} not set`);
            }
        }
        
        for (const envVar of optionalEnvVars) {
            if (process.env[envVar]) {
                this.log(`‚úÖ ${envVar}: configurado`, 'success');
            } else {
                this.log(`‚ö†Ô∏è  ${envVar}: n√£o configurado (opcional)`, 'warning');
            }
        }
        
        // Verificar configura√ß√µes espec√≠ficas do ambiente
        const nodeEnv = process.env.NODE_ENV;
        if (nodeEnv === 'production') {
            this.log('üöÄ Modo produ√ß√£o detectado - valida√ß√µes adicionais...', 'info');
            
            if (!process.env.JWT_SECRET) {
                this.log('‚ùå JWT_SECRET obrigat√≥rio em produ√ß√£o', 'error');
                this.results.errors.push('JWT_SECRET required in production');
            }
            
            if (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('localhost')) {
                this.log('‚ö†Ô∏è  Database localhost em produ√ß√£o?', 'warning');
            }
        }
    }

    async runLoadTest(baseUrl) {
        this.log('‚ö° Executando teste de carga b√°sico...', 'info');
        
        try {
            const concurrency = 10;
            const requests = 50;
            const results = [];
            
            this.log(`üìä Enviando ${requests} requisi√ß√µes com ${concurrency} simult√¢neas...`, 'info');
            
            for (let batch = 0; batch < requests / concurrency; batch++) {
                const batchPromises = Array(concurrency).fill().map(async () => {
                    const start = Date.now();
                    try {
                        await axios.get(`${baseUrl}/health`, { timeout: 5000 });
                        return Date.now() - start;
                    } catch (error) {
                        return -1; // Erro
                    }
                });
                
                const batchResults = await Promise.all(batchPromises);
                results.push(...batchResults);
                
                // Pequena pausa entre batches
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            
            const successfulRequests = results.filter(r => r > 0);
            const failedRequests = results.filter(r => r === -1).length;
            
            if (successfulRequests.length === 0) {
                throw new Error('Todas as requisi√ß√µes falharam');
            }
            
            const avgTime = successfulRequests.reduce((a, b) => a + b, 0) / successfulRequests.length;
            const maxTime = Math.max(...successfulRequests);
            const minTime = Math.min(...successfulRequests);
            
            this.log(`üìà Resultados do teste de carga:`, 'info');
            this.log(`   ‚úÖ Sucessos: ${successfulRequests.length}/${requests}`, 'success');
            this.log(`   ‚ùå Falhas: ${failedRequests}`, failedRequests > 0 ? 'warning' : 'success');
            this.log(`   ‚è±Ô∏è  Tempo m√©dio: ${avgTime.toFixed(0)}ms`, 'info');
            this.log(`   ‚ö° Tempo m√≠n/m√°x: ${minTime}ms / ${maxTime}ms`, 'info');
            
            if (failedRequests > requests * 0.05) { // Mais de 5% de falhas
                this.log('‚ö†Ô∏è  Taxa de falhas alta - verificar capacidade', 'warning');
            }
            
            if (avgTime > 1000) {
                this.log('‚ö†Ô∏è  Tempo de resposta alto - verificar performance', 'warning');
            }
            
        } catch (error) {
            this.log(`‚ùå Erro no teste de carga: ${error.message}`, 'error');
            this.results.errors.push(`Load test: ${error.message}`);
        }
    }

    generateDeployReport() {
        const timestamp = new Date().toISOString();
        const totalErrors = this.results.errors.length;
        const checksCompleted = Object.values(this.results.deployChecks).filter(Boolean).length;
        const totalChecks = Object.keys(this.results.deployChecks).length;
        
        this.log('\n' + '='.repeat(80), 'info');
        this.log('üöÄ RELAT√ìRIO DE VALIDA√á√ÉO DE DEPLOY', 'info');
        this.log('='.repeat(80), 'info');
        
        // Resumo do ambiente
        this.log('\nüìä AMBIENTE:', 'info');
        if (this.results.environment) {
            Object.entries(this.results.environment).forEach(([key, value]) => {
                this.log(`   ${key}: ${value}`, 'info');
            });
        }
        
        // Status dos checks
        this.log('\n‚úÖ VERIFICA√á√ïES DE DEPLOY:', 'info');
        Object.entries(this.results.deployChecks).forEach(([check, passed]) => {
            const status = passed ? '‚úÖ' : '‚ùå';
            const color = passed ? 'success' : 'error';
            this.log(`   ${status} ${check}`, color);
        });
        
        this.log(`\nüìà RESUMO: ${checksCompleted}/${totalChecks} verifica√ß√µes passou`, 
                 checksCompleted === totalChecks ? 'success' : 'warning');
        
        // Erros encontrados
        if (totalErrors > 0) {
            this.log('\n‚ùå ERROS ENCONTRADOS:', 'error');
            this.results.errors.forEach(error => {
                this.log(`   ‚Ä¢ ${error}`, 'error');
            });
        }
        
        // Recomenda√ß√µes
        this.log('\nüéØ RECOMENDA√á√ïES:', 'info');
        
        if (totalErrors === 0 && checksCompleted === totalChecks) {
            this.log('   ‚úÖ Deploy aprovado! Sistema pronto para produ√ß√£o', 'success');
            this.log('   üöÄ Prossiga com confian√ßa', 'success');
        } else if (totalErrors === 0) {
            this.log('   ‚ö†Ô∏è  Deploy parcialmente validado', 'warning');
            this.log('   üîß Complete as verifica√ß√µes restantes', 'warning');
        } else {
            this.log('   üö® Deploy N√ÉO APROVADO', 'error');
            this.log('   üõ†Ô∏è  Corrija todos os erros antes de prosseguir', 'error');
        }
        
        // Salvar relat√≥rio
        const report = {
            timestamp,
            environment: this.results.environment,
            deployChecks: this.results.deployChecks,
            errors: this.results.errors,
            warnings: this.results.warnings,
            tests: this.results.tests,
            summary: {
                checksCompleted,
                totalChecks,
                totalErrors,
                approved: totalErrors === 0 && checksCompleted === totalChecks
            }
        };
        
        const reportPath = 'tests/deploy-validation-report.json';
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        this.log(`\nüìÑ Relat√≥rio salvo em: ${reportPath}`, 'info');
        
        return report;
    }

    async runFullValidation() {
        this.log('üöÄ INICIANDO VALIDA√á√ÉO COMPLETA DE DEPLOY', 'info');
        
        // 1. Detectar ambiente
        const environment = await this.detectEnvironment();
        const baseUrl = this.environments[environment]?.url || 'http://localhost:3002';
        const isProduction = environment === 'production';
        
        // 2. Aguardar servidor (se local)
        if (environment === 'development') {
            this.log('‚è≥ Aguardando servidor local...', 'info');
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        
        // 3. Executar valida√ß√µes
        await this.validateEnvironmentConfig();
        await this.validateBackendDeploy(baseUrl);
        await this.validateFrontendDeploy(baseUrl);
        await this.validateDatabaseDeploy();
        await this.validateMobileBuild();
        await this.validateSecurity(baseUrl, isProduction);
        
        // 4. Teste de carga (apenas se servidor estiver rodando)
        try {
            await this.runLoadTest(baseUrl);
        } catch (error) {
            this.log(`‚ö†Ô∏è  Teste de carga pulado: ${error.message}`, 'warning');
        }
        
        // 5. Gerar relat√≥rio
        const report = this.generateDeployReport();
        
        // 6. C√≥digo de sa√≠da
        const exitCode = report.summary.approved ? 0 : 1;
        this.log(`\nüèÅ Valida√ß√£o conclu√≠da. Exit code: ${exitCode}`, 
                 exitCode === 0 ? 'success' : 'error');
        
        return { report, exitCode };
    }
}

// Fun√ß√£o principal
async function main() {
    const validator = new DeployValidator();
    const { report, exitCode } = await validator.runFullValidation();
    process.exit(exitCode);
}

if (require.main === module) {
    main().catch(error => {
        console.error('üí• Erro fatal na valida√ß√£o de deploy:', error.message);
        process.exit(2);
    });
}

module.exports = DeployValidator;