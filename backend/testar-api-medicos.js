#!/usr/bin/env node

const axios = require('axios');

const BASE_URL = 'http://localhost:3002/api';

async function testarAPIMedicos() {
  console.log('üß™ TESTANDO APIS DE M√âDICOS - MediApp Backend\n');
  
  try {
    // Teste 1: Listar todos os m√©dicos
    console.log('1Ô∏è‚É£ Testando: GET /api/medicos');
    const listagem = await axios.get(`${BASE_URL}/medicos`);
    console.log(`   ‚úÖ Status: ${listagem.status}`);
    console.log(`   üìä Total de m√©dicos: ${listagem.data.data.length}`);
    console.log(`   üìÑ Pagina√ß√£o: ${listagem.data.pagination.total} total, ${listagem.data.pagination.pages} p√°ginas\n`);
    
    // Mostrar primeiro m√©dico da lista
    if (listagem.data.data.length > 0) {
      const primeiroMedico = listagem.data.data[0];
      console.log('   üë®‚Äç‚öïÔ∏è Primeiro m√©dico da lista:');
      console.log(`      Nome: ${primeiroMedico.nome}`);
      console.log(`      CRM: ${primeiroMedico.crm}/${primeiroMedico.crm_uf}`);
      console.log(`      Especialidade: ${primeiroMedico.especialidade}`);
      console.log(`      Email: ${primeiroMedico.email}\n`);
    }

    // Teste 2: Buscar m√©dico espec√≠fico
    if (listagem.data.data.length > 0) {
      const medicoId = listagem.data.data[0].id;
      console.log('2Ô∏è‚É£ Testando: GET /api/medicos/:id');
      const medicoBusca = await axios.get(`${BASE_URL}/medicos/${medicoId}`);
      console.log(`   ‚úÖ Status: ${medicoBusca.status}`);
      console.log(`   üë®‚Äç‚öïÔ∏è M√©dico encontrado: ${medicoBusca.data.data.nome}`);
      console.log(`   üè• Especialidade: ${medicoBusca.data.data.especialidade}`);
      console.log(`   üì± Celular: ${medicoBusca.data.data.celular || 'N√£o informado'}\n`);
    }

    // Teste 3: Buscar com filtros
    console.log('3Ô∏è‚É£ Testando: GET /api/medicos?search=carlos');
    const buscaFiltro = await axios.get(`${BASE_URL}/medicos?search=carlos`);
    console.log(`   ‚úÖ Status: ${buscaFiltro.status}`);
    console.log(`   üîç Resultados encontrados: ${buscaFiltro.data.data.length}`);
    
    if (buscaFiltro.data.data.length > 0) {
      console.log(`   üë®‚Äç‚öïÔ∏è M√©dico encontrado: ${buscaFiltro.data.data[0].nome}\n`);
    }

    // Teste 4: Buscar por especialidade
    console.log('4Ô∏è‚É£ Testando: GET /api/medicos?especialidade=cardiologia');
    const buscaEspecialidade = await axios.get(`${BASE_URL}/medicos?especialidade=cardiologia`);
    console.log(`   ‚úÖ Status: ${buscaEspecialidade.status}`);
    console.log(`   üè• Cardiologistas encontrados: ${buscaEspecialidade.data.data.length}\n`);

    // Teste 5: Estat√≠sticas do dashboard
    console.log('5Ô∏è‚É£ Testando: GET /api/medicos/estatisticas/dashboard');
    const estatisticas = await axios.get(`${BASE_URL}/medicos/estatisticas/dashboard`);
    console.log(`   ‚úÖ Status: ${estatisticas.status}`);
    console.log('   üìä Estat√≠sticas:');
    console.log(`      Total de m√©dicos: ${estatisticas.data.data.medicos.total}`);
    console.log(`      M√©dicos ativos: ${estatisticas.data.data.medicos.ativos}`);
    console.log(`      M√©dicos inativos: ${estatisticas.data.data.medicos.inativos}`);
    console.log('   üè• Especialidades cadastradas:');
    
    estatisticas.data.data.especialidades.forEach(esp => {
      console.log(`      - ${esp.nome}: ${esp.quantidade} m√©dico(s)`);
    });
    console.log('');

    // Teste 6: Criar novo m√©dico (teste)
    console.log('6Ô∏è‚É£ Testando: POST /api/medicos (novo m√©dico)');
    const novoMedico = {
      nome: "Dr. Rafael Teste Silva",
      email: "rafael.teste@medifast.com",
      senha: "teste123",
      crm: "99999",
      crm_uf: "SP",
      especialidade: "Cl√≠nica Geral",
      telefone: "(11) 1234-5678",
      celular: "(11) 99999-9999",
      endereco: "Rua Teste, 123 - S√£o Paulo - SP",
      formacao: "Medicina pela USP",
      experiencia: "5 anos em cl√≠nica geral",
      horario_atendimento: "Segunda a Sexta: 8h √†s 17h"
    };

    try {
      const criacao = await axios.post(`${BASE_URL}/medicos`, novoMedico);
      console.log(`   ‚úÖ Status: ${criacao.status}`);
      console.log(`   üë®‚Äç‚öïÔ∏è M√©dico criado: ${criacao.data.data.nome}`);
      console.log(`   üÜî ID: ${criacao.data.data.id}\n`);
      
      // Teste 7: Atualizar o m√©dico criado
      console.log('7Ô∏è‚É£ Testando: PUT /api/medicos/:id (atualiza√ß√£o)');
      const atualizacao = await axios.put(`${BASE_URL}/medicos/${criacao.data.data.id}`, {
        especialidade: "Medicina de Fam√≠lia",
        experiencia: "6 anos em medicina de fam√≠lia e comunidade"
      });
      console.log(`   ‚úÖ Status: ${atualizacao.status}`);
      console.log(`   üîÑ M√©dico atualizado: ${atualizacao.data.data.nome}`);
      console.log(`   üè• Nova especialidade: ${atualizacao.data.data.especialidade}\n`);
      
      // Teste 8: Desativar m√©dico
      console.log('8Ô∏è‚É£ Testando: DELETE /api/medicos/:id (desativa√ß√£o)');
      const desativacao = await axios.delete(`${BASE_URL}/medicos/${criacao.data.data.id}`);
      console.log(`   ‚úÖ Status: ${desativacao.status}`);
      console.log(`   üö´ M√©dico desativado com sucesso\n`);
      
    } catch (createError) {
      console.log(`   ‚ö†Ô∏è  Erro na cria√ß√£o: ${createError.response?.data?.message || createError.message}\n`);
    }

    console.log('üéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!');
    console.log('‚úÖ APIs de m√©dicos est√£o funcionando perfeitamente!');

  } catch (error) {
    console.error(`‚ùå Erro no teste: ${error.message}`);
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }
}

// Adicionar axios se n√£o estiver instalado
async function verificarDependencias() {
  try {
    require('axios');
  } catch (error) {
    console.log('üì¶ Instalando axios para testes...');
    const { execSync } = require('child_process');
    execSync('npm install axios', { cwd: __dirname });
    console.log('‚úÖ Axios instalado!\n');
  }
}

async function main() {
  await verificarDependencias();
  await testarAPIMedicos();
}

main();