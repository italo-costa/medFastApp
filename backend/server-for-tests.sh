#!/bin/bash

# SERVIDOR SUPER EST√ÅVEL - MediApp
# Foco: Ficar "em p√©" para testes manuais

set -e

# Configura√ß√µes
PORT=3001
PROJECT_DIR="/mnt/c/workspace/aplicativo/backend"
LOG_FILE="/tmp/mediapp-stable.log"
PID_FILE="/tmp/mediapp-stable.pid"

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Limpar processos anteriores
cleanup() {
    log "üßπ Limpando processos anteriores..."
    pkill -f "node.*server" 2>/dev/null || true
    pkill -f "python.*mediapp" 2>/dev/null || true
    pkill -f "python.*bridge" 2>/dev/null || true
    sudo fuser -k ${PORT}/tcp 2>/dev/null || true
    rm -f /tmp/mediapp-*.pid 2>/dev/null || true
    sleep 3
    log "‚úÖ Limpeza conclu√≠da"
}

# Verificar depend√™ncias
check_dependencies() {
    log "üîç Verificando depend√™ncias..."
    
    # Node.js
    if ! command -v node >/dev/null 2>&1; then
        log "‚ùå Node.js n√£o encontrado"
        return 1
    fi
    
    # Python
    if ! command -v python3 >/dev/null 2>&1; then
        log "‚ùå Python3 n√£o encontrado"
        return 1
    fi
    
    # PostgreSQL
    if ! sudo service postgresql status >/dev/null 2>&1; then
        log "‚ö†Ô∏è PostgreSQL n√£o est√° rodando - iniciando..."
        sudo service postgresql start
    fi
    
    log "‚úÖ Depend√™ncias OK"
    return 0
}

# Testar conectividade
test_connectivity() {
    local port=$1
    local max_attempts=10
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "http://localhost:$port/health" >/dev/null 2>&1; then
            log "‚úÖ Conectividade OK na tentativa $attempt"
            return 0
        fi
        
        log "‚è≥ Tentativa $attempt/$max_attempts - aguardando..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log "‚ùå Falha na conectividade ap√≥s $max_attempts tentativas"
    return 1
}

# Iniciar Node.js com m√°xima estabilidade
start_nodejs() {
    log "üöÄ Tentando Node.js..."
    
    cd "$PROJECT_DIR" || return 1
    
    # Verificar node_modules
    if [ ! -d "node_modules" ]; then
        log "üì¶ Instalando depend√™ncias Node.js..."
        npm install --silent
    fi
    
    # Iniciar com nohup e redirecionamento
    log "üîÑ Iniciando servidor Node.js..."
    nohup node src/server.js >"$LOG_FILE" 2>&1 &
    local pid=$!
    
    echo $pid > "$PID_FILE"
    log "üìä Node.js iniciado - PID: $pid"
    
    # Aguardar inicializa√ß√£o
    sleep 5
    
    # Verificar se ainda est√° rodando
    if kill -0 $pid 2>/dev/null; then
        log "‚úÖ Processo Node.js ativo"
        
        # Testar conectividade
        if test_connectivity $PORT; then
            log "üéØ Node.js FUNCIONANDO!"
            return 0
        else
            log "‚ùå Node.js sem conectividade"
            kill $pid 2>/dev/null || true
            return 1
        fi
    else
        log "‚ùå Processo Node.js morreu"
        return 1
    fi
}

# Iniciar Python como fallback
start_python() {
    log "üêç Tentando Python (fallback)..."
    
    # Criar servidor Python simples
    cat > /tmp/simple-server.py << 'EOF'
#!/usr/bin/env python3
import http.server
import socketserver
import json
import datetime
import signal
import sys

PORT = 3001

class Handler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            response = {
                'status': 'OK',
                'server': 'Python Simple',
                'timestamp': datetime.datetime.now().isoformat(),
                'message': 'MediApp rodando em Python para testes manuais'
            }
            self.wfile.write(json.dumps(response, indent=2).encode())
        else:
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            html = f'''
<!DOCTYPE html>
<html>
<head><title>MediApp - Testes Manuais</title></head>
<body>
    <h1>üè• MediApp - Servidor de Testes</h1>
    <p><strong>Status:</strong> ‚úÖ Online para testes manuais</p>
    <p><strong>Timestamp:</strong> {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
    <p><a href="/health">Health Check</a></p>
    <h2>Servidor Python Est√°vel</h2>
    <p>Este servidor foi criado para permanecer est√°vel durante os testes manuais.</p>
</body>
</html>'''
            self.wfile.write(html.encode())

def signal_handler(sig, frame):
    print('\\nServidor Python interrompido')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

with socketserver.TCPServer(("0.0.0.0", PORT), Handler) as httpd:
    httpd.allow_reuse_address = True
    print(f'üêç Servidor Python rodando na porta {PORT}')
    print(f'üåê Acesse: http://localhost:{PORT}')
    httpd.serve_forever()
EOF

    # Iniciar servidor Python
    nohup python3 /tmp/simple-server.py >"$LOG_FILE" 2>&1 &
    local pid=$!
    
    echo $pid > "$PID_FILE"
    log "üìä Python iniciado - PID: $pid"
    
    # Aguardar inicializa√ß√£o
    sleep 3
    
    # Verificar se ainda est√° rodando
    if kill -0 $pid 2>/dev/null; then
        log "‚úÖ Processo Python ativo"
        
        # Testar conectividade
        if test_connectivity $PORT; then
            log "üéØ Python FUNCIONANDO!"
            return 0
        else
            log "‚ùå Python sem conectividade"
            kill $pid 2>/dev/null || true
            return 1
        fi
    else
        log "‚ùå Processo Python morreu"
        return 1
    fi
}

# Monitor cont√≠nuo
monitor_server() {
    local max_restarts=3
    local restart_count=0
    
    while [ $restart_count -lt $max_restarts ]; do
        log "üîÑ Tentativa $((restart_count + 1))/$max_restarts"
        
        # Tentar Node.js primeiro
        if start_nodejs; then
            log "‚úÖ SUCESSO! Servidor Node.js est√°vel"
            show_access_info
            return 0
        fi
        
        log "‚ö†Ô∏è Node.js falhou, tentando Python..."
        
        # Fallback para Python
        if start_python; then
            log "‚úÖ SUCESSO! Servidor Python est√°vel"
            show_access_info
            return 0
        fi
        
        restart_count=$((restart_count + 1))
        if [ $restart_count -lt $max_restarts ]; then
            log "‚è≥ Aguardando antes da pr√≥xima tentativa..."
            sleep 10
        fi
    done
    
    log "‚ùå FALHA: Todas as tentativas esgotadas"
    return 1
}

# Mostrar informa√ß√µes de acesso
show_access_info() {
    log "üéØ ======================================="
    log "üè• MediApp - PRONTO PARA TESTES MANUAIS"
    log "üéØ ======================================="
    log "üåê URL Principal: http://localhost:$PORT"
    log "üîß Health Check: http://localhost:$PORT/health"
    log "üìä PID do Servidor: $(cat $PID_FILE 2>/dev/null || echo 'N/A')"
    log "üìã Log File: $LOG_FILE"
    log "üéØ ======================================="
    log "üí° TESTE NO BROWSER: Abra http://localhost:$PORT"
    log "üéØ ======================================="
}

# Status do servidor
status() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 $pid 2>/dev/null; then
            log "‚úÖ Servidor ATIVO (PID: $pid)"
            if test_connectivity $PORT; then
                log "‚úÖ Conectividade OK"
            else
                log "‚ö†Ô∏è Servidor ativo mas sem conectividade"
            fi
        else
            log "‚ùå Servidor INATIVO (processo morto)"
            rm -f "$PID_FILE"
        fi
    else
        log "‚ùå Nenhum servidor registrado"
    fi
}

# Parar servidor
stop() {
    log "üõë Parando servidor..."
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 $pid 2>/dev/null; then
            kill -TERM $pid
            sleep 3
            if kill -0 $pid 2>/dev/null; then
                kill -KILL $pid
                log "‚ö†Ô∏è Processo terminado for√ßadamente"
            else
                log "‚úÖ Processo terminado graciosamente"
            fi
        fi
        rm -f "$PID_FILE"
    fi
    cleanup
}

# Main
case "${1:-start}" in
    start)
        log "üöÄ ========================================="
        log "üè• MediApp - Inicializa√ß√£o para Testes"
        log "üöÄ ========================================="
        cleanup
        if check_dependencies; then
            monitor_server
        else
            log "‚ùå Falha na verifica√ß√£o de depend√™ncias"
            exit 1
        fi
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        sleep 2
        cleanup
        if check_dependencies; then
            monitor_server
        fi
        ;;
    logs)
        tail -n 50 "$LOG_FILE" 2>/dev/null || echo "Nenhum log encontrado"
        ;;
    *)
        echo "Uso: $0 {start|stop|restart|status|logs}"
        echo ""
        echo "Comandos:"
        echo "  start   - Iniciar servidor para testes manuais"
        echo "  stop    - Parar servidor"
        echo "  status  - Verificar status"
        echo "  restart - Reiniciar servidor"
        echo "  logs    - Mostrar logs recentes"
        exit 1
        ;;
esac