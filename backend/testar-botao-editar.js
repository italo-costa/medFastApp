#!/usr/bin/env node

const axios = require('axios');

async function testarBotaoEditar() {
  console.log('üß™ TESTANDO BOT√ÉO EDITAR NA LISTA DE M√âDICOS\n');
  
  try {
    // Teste 1: Verificar se a p√°gina de lista carrega
    console.log('1Ô∏è‚É£ Verificando acesso √† lista de m√©dicos...');
    const listaResponse = await axios.get('http://localhost:3002/lista-medicos.html');
    console.log(`   ‚úÖ Status: ${listaResponse.status}`);
    console.log('   üìÑ P√°gina acess√≠vel com sucesso\n');

    // Teste 2: Verificar se a API de m√©dicos retorna dados
    console.log('2Ô∏è‚É£ Verificando API de m√©dicos...');
    const apiResponse = await axios.get('http://localhost:3002/api/medicos');
    const medicos = apiResponse.data.data;
    console.log(`   ‚úÖ Status: ${apiResponse.status}`);
    console.log(`   üë®‚Äç‚öïÔ∏è Total de m√©dicos: ${medicos.length}`);
    
    if (medicos.length > 0) {
      const primeiroMedico = medicos[0];
      console.log(`   üìã Primeiro m√©dico: ${primeiroMedico.nome} (ID: ${primeiroMedico.id})\n`);
      
      // Teste 3: Verificar se a p√°gina de edi√ß√£o carrega com um ID
      console.log('3Ô∏è‚É£ Verificando acesso √† p√°gina de edi√ß√£o...');
      const editResponse = await axios.get(`http://localhost:3002/editar-medico.html?id=${primeiroMedico.id}`);
      console.log(`   ‚úÖ Status: ${editResponse.status}`);
      console.log('   üìù P√°gina de edi√ß√£o acess√≠vel com sucesso\n');
      
      // Teste 4: Verificar se o conte√∫do da lista cont√©m os bot√µes
      console.log('4Ô∏è‚É£ Verificando conte√∫do da p√°gina de lista...');
      const conteudoLista = listaResponse.data;
      
      const temBotaoEditar = conteudoLista.includes('onclick="editDoctor(');
      const temFuncaoEditDoctor = conteudoLista.includes('function editDoctor(doctorId)');
      const temRedirecionamento = conteudoLista.includes('window.location.href = `/editar-medico.html?id=${doctorId}`;') ||
                                   conteudoLista.includes('window.location.href = url;');
      
      console.log(`   üîò Bot√£o editar no HTML: ${temBotaoEditar ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`   üîß Fun√ß√£o editDoctor: ${temFuncaoEditDoctor ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`   üîó Redirecionamento: ${temRedirecionamento ? '‚úÖ SIM' : '‚ùå N√ÉO'}\n`);
      
      console.log('5Ô∏è‚É£ URLs para teste manual:');
      console.log(`   üìã Lista: http://localhost:3002/lista-medicos.html`);
      console.log(`   ‚úèÔ∏è  Editar: http://localhost:3002/editar-medico.html?id=${primeiroMedico.id}\n`);
      
      console.log('üéØ INSTRU√á√ïES PARA TESTE MANUAL:');
      console.log('   1. Acesse: http://localhost:3002/lista-medicos.html');
      console.log('   2. Aguarde o carregamento dos m√©dicos');
      console.log('   3. Clique no bot√£o "Editar" de qualquer m√©dico');
      console.log('   4. Verifique se redirecionou para a p√°gina de edi√ß√£o');
      console.log('   5. Confirme se os dados foram carregados automaticamente\n');
      
      if (temBotaoEditar && temFuncaoEditDoctor && temRedirecionamento) {
        console.log('üéâ TODOS OS COMPONENTES EST√ÉO FUNCIONAIS!');
        console.log('‚úÖ O bot√£o "Editar" deve estar funcionando corretamente');
      } else {
        console.log('‚ö†Ô∏è  POSS√çVEL PROBLEMA DETECTADO');
        console.log('‚ùå Alguns componentes podem n√£o estar funcionando');
      }
      
    } else {
      console.log('   ‚ö†Ô∏è  Nenhum m√©dico encontrado na base de dados');
    }

  } catch (error) {
    console.error(`‚ùå Erro no teste: ${error.message}`);
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   URL: ${error.config?.url}`);
    }
  }
}

async function main() {
  await testarBotaoEditar();
}

main();